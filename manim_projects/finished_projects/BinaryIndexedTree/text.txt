学习树状数组之前，我们先来看这样一个问题
给出一个数组，要求支持单点修改和区间和的查询操作
首先，我们考虑一下朴素算法，即暴力思想
对于单点修改，我们只需要更改原数组的值，复杂度O1
对于区间和查询，我们可以遍历整个区间内的值，复杂度ON
这样，我们多次修改查询的总复杂度最坏为ON方
对于大数据来说，这个复杂度是程序不能接受的
所以我们引入一个数据结构，名叫树状数组
它的单点修改复杂度为O烙个N
区间和查询的复杂度也为O烙个N
所以N次操作的总复杂度为N倍O烙个N
可以面对非常大规模的数据
另外，我们还需要一个前置知识，lowbit 操作
它表示非负整数在二进制表示下最低位1和后面的0构成的十进制数值
例如44的 lowbit 值为4
求这个数值，我们可以先把这个数按位取反
再加一
这时我们会发现，除了最低位的一，和后面的零
其余位上取反加一后和原数均不同
我们只需要对两个数按位与，就能得到最后的结果
因为计算机存储使用的是补码，取反加一后的值就是负的这个数
所以 lowbit 的值为N与负N
我们再回来看一下这道题
由于求的是区间和，所以我们很容易想到前缀和相减的方法
而使用树形结构来维护，就会把复杂度降到O烙个N
对于一个序列，我们在其上建立一个这样的森林结构
每个节点TX保存以X为根的子树中叶节点值的和
那么每个节点覆盖的长度是多少呢
把每个节点TX的X转化为二进制后
我们会发现每一层的末尾的零的个数都是相同的
而且零的个数与其覆盖的长度有关
进一步观察，我们会发现，TX节点覆盖的长度就是 lowbit X
继续观察，我们还会发现TX节点的父节点为T X加 lowbit X
而且整棵树的深度为烙个N加一
接下来，我们研究一下两个操作
对于 add 操作，我们以 add 三五为例
在整棵树上维护这个值，需要一层一层向上找到父节点
并按照需要修改这个节点的值，即加五
按照这个思路，我们可以写出代码
并且不难发现，执行时每一层都经过了处理，即最坏复杂度为O烙个N
对于 ask 操作，我们以 ask 七为例
查询这个点的前缀和，需要从这个点向左上找到上一个节点
并加上其节点的值
可以发现，向左上找上一个节点，只需要将下标减等于 lowbit 这个节点的下标
同理，我们写出代码，而且这个操作的最坏复杂度也是O烙个N
如果需要求区间和，我们可以分别求出前缀和并相减
树状数组是一个动态维护前缀和的工具，我们需要灵活应用它
在上述例题中，我们进行了最简单的单点修改和区间查询
但树状数组能做的不止这些
它可以进行区间修改、单点查询，区间修改、区间查询等操作
对于区间修改、单点查询，我们先引入一个差分数组B
用树状数组维护数组B的前缀和，即原数组A中每个元素的增量
区间增加时，对左边界L加D，右边界R加一减D
查询单点值AX时，用原数AX加上增量，即 ask X
对于区间修改、区间查询，我们同样可以使用这种差分数组的思路
这时我们需要求的是A数组中每个元素前缀和的增量
我们可以很容易地写出所求的式子，但是这个数该怎么计算呢
我们不妨画个图来看一下
图中蓝色阴影即为所求
由于这个值计算非常不方便，所以我们不妨构建一个大矩形，然后减去我们可以计算的剩余部分
这样我们就写出了可以方便计算的公式
而最后黄色的式子，我们可以用另一个树状数组来维护I乘BI的前缀和来计算
对于区间加和，我们可以这样对两个树状数组进行 add 操作
然后区间查询，可以根据刚刚的结论写出公式
对于一个序列，我们可以根据其建立一个树状数组，去维护其前缀区间
其维护的值不止有和，还有异或和、最大值、最小值等等
而对于区间修改、区间查询这样复杂的区间操作
使用树状数组就不是很方便啦
我们可以转而使用扩展性更强的线段树来进行区间维护
至于线段树，我们就以后再说吧
最后，我们进行一个总结，并给出所有代码
本视频的参考资料均以放在简介中置顶
由于某些原因不能访问维基百科的，可以私信 up 主索取 PDF 版
制作不易，喜欢这个视频的话，就三连关注支持一下 up 主吧